import pandas as pd
import tensorflow as tf
from tensorflow import keras
import seaborn as sns
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')
import numpy as np





df = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')


df.sample(5)





df.drop('customerID', axis = 1, inplace = True)





df.dtypes




df.TotalCharges.values





pd.to_numeric(df.TotalCharges, errors = 'coerce').isnull()





df1 = df[df.TotalCharges!=' ']
df1.shape





df1.dtypes





df1.TotalCharges = pd.to_numeric(df1.TotalCharges)





df1.dtypes





yes_tenure = df1[df1.Churn == 'Yes'].tenure
No_tenure = df1[df1.Churn == 'No'].tenure

sns.kdeplot(yes_tenure, label='Churn Yes', color='red')

sns.kdeplot(No_tenure,label='Churn No', color='blue')
plt.legend()





yes_tenure = df1[df1.Churn == 'Yes'].MonthlyCharges
No_tenure = df1[df1.Churn == 'No'].MonthlyCharges

sns.kdeplot(yes_tenure, label='Churn Yes', color='red')

sns.kdeplot(No_tenure,label='Churn No', color='blue')
plt.legend()





def check(df1):
 for column in df1:
    if df1[column].dtypes == 'object':
     print(column, ':', df1[column].unique())





df1.replace('No phone service', 'No', inplace = True)
df1.replace('No internet service', 'No', inplace = True)




check(df1)





yes_no_columns = ['Partner', 'Dependents', 'PhoneService', 'MultipleLines',
                 'OnlineSecurity', 'OnlineBackup','DeviceProtection','TechSupport','StreamingTV',
                 'StreamingMovies','PaperlessBilling','Churn']




for col in yes_no_columns:
    df1[col].replace({'Yes':1, 'No':0}, inplace = True)



check(df1)




df1['gender'].replace({'Female':1, 'Male':0}, inplace = True)





df1['gender'].unique()





df2 = pd.get_dummies(data = df1, columns = ['InternetService','Contract','PaymentMethod'])




df2.columns




cols_to_scale = ['tenure', 'MonthlyCharges', 'TotalCharges']




from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df2[cols_to_scale] = scaler.fit_transform(df2[cols_to_scale])


df2.sample(3)



X = df2.drop('Churn', axis = 1)
y = df2['Churn']
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2, random_state=5)



X_train.shape



model = keras.Sequential([
    keras.layers.Dense(26, input_shape = (26,), activation = 'relu'),
    keras.layers.Dense(1, activation = 'sigmoid')
    
])

model.compile(optimizer = 'adam', loss = 'binary_crossentropy',metrics = ['accuracy'])



model.fit(X_train, y_train, epochs = 100)



model.evaluate(X_test,y_test)

y_pred = []
temp = model.predict(X_test)
for t in temp:
    if t>=0.5:
        y_pred.append(1)
    else:
        y_pred.append(0)




from sklearn.metrics import confusion_matrix, classification_report

print(classification_report(y_test,y_pred))

cf = confusion_matrix(y_test,y_pred)





# In[78]:


map = sns.heatmap(cf, annot = True, fmt = 'd')
